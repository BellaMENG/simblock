package simblock.block;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static simblock.simulator.Simulator.getSimulatedNodes;
import static simblock.simulator.Simulator.getTargetInterval;

import simblock.node.Node;
import simblock.transaction.Transaction;

public class RandomPoSBlock extends Block {

	private final BigInteger difficulty;
	private final BigInteger totalDifficulty;
	private final BigInteger nextDifficulty;
	private static BigInteger genesisNextDifficulty;
	

	public RandomPoSBlock(RandomPoSBlock parent, Node minter, long time, int numberOfTx, List<Transaction> transactions, BigInteger difficulty) {
		super(parent, minter, time, numberOfTx, transactions);
		// TODO Auto-generated constructor stub
		this.difficulty = difficulty;
		if (parent == null) {
			this.totalDifficulty = BigInteger.ZERO.add(difficulty);
			this.nextDifficulty = RandomPoSBlock.genesisNextDifficulty;
		} else {
			this.totalDifficulty = parent.getTotalDifficulty().add(difficulty);
			// TODO: difficulty adjustment
			// TODO: here, difficulty is a set number, which equals to genesis difficulty.
			// because genesis_difficulty = total_mining_power * target_interval
			// and total_mining_power does not change once generated by genminingpower()
			// function in Main.java

			this.nextDifficulty = parent.getNextDifficulty();
		}
	}
	
	public BigInteger getDifficulty() {
		return this.difficulty;
	}
	
	public BigInteger getTotalDifficulty() {
		return this.totalDifficulty;
	}
	
	public BigInteger getNextDifficulty() {
		return this.nextDifficulty;
	}

	public static RandomPoSBlock genesisBlock(Node minter) {
		// TODO: implement the randomized PoS part
		// currently using ProofOfWork method
		long totalMiningPower = 0;
		for (Node node: getSimulatedNodes()) {
			totalMiningPower += node.getMiningPower();
		}
		genesisNextDifficulty = BigInteger.valueOf(totalMiningPower * getTargetInterval()); 
		return new RandomPoSBlock(null, minter, 0, 0, null, BigInteger.ZERO);
	}
}
